<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello-ES6]]></title>
    <url>%2F2019%2F01%2F25%2FHello-ES6%2F</url>
    <content type="text"><![CDATA[ES6入门1.ES6的由来 ECMAScript 和 JavaScriptECMA 是标准，JS 是实现ECMAScript 简称 ECMA 或 ES 历史版本1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现1999, ES3.0 被广泛支持2011, ES5.1 成为 ISO 国际标准2015, ES6.0 正式发布 2.ES6的兼容性 ES6(ES2015) 支持的环境 IE10+, Chrome, FireFox, 移动端, NodeJS 解决不兼容办法，编译、转换 3.变量let和常量const以及和var的区别 1.var 可重复声明,没有报错和警告 无法限制修改 没有块级作用域-{} var function存在变量存在变量声明 var 只会提前声明 function既声明又定义12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt; //var function存在变量存在变量声明 //var 只会提前声明 function既声明又定义 console.log(a);//undefined console.log(getA); var a=1; function getA()&#123;&#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.let和const 不能重复声明和提前声明 不存在常量提升都是块级作用域 let是变量,可以修改 const是常量,不能修改1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;script&gt; let a=3; a=4; console.log(a);//输出4 const b=3; b=2; console.log(b);//报错&lt;/script&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 3.例子:1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload= function() &#123; /* var aBtn = document.getElementsByTagName(&apos;input&apos;) for(var i=0;i&lt;aBtn.length;i++)&#123; aBtn[i].onclick = function() &#123; alert(i);//输出都是3 &#125; &#125;*/ //解决方案1: var aBtn = document.getElementsByTagName(&apos;input&apos;) for (var i = 0; i &lt; aBtn.length; i++) &#123; //封装到函数里,限制作用域 (function (i) &#123; aBtn[i].onclick = function () &#123; alert(i); &#125; &#125;)(i) &#125; &#125; //解决方案2(使用let): /* let aBtn = document.getElementsByTagName(&apos;input&apos;) for(let i=0;i&lt;aBtn.length;i++)&#123; aBtn[i].onclick = function() &#123; alert(i); &#125; &#125;*/ &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; value=&quot;按钮1&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;按钮2&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;按钮3&quot;&gt;&lt;/body&gt;&lt;/html&gt; 4.函数-箭头函数箭头函数就是普通函数的简写 1.如果只有一个参数,()可以省略. 2.如果只有一个return,{}可以省略.12345678// 普通函数function name() &#123;&#125;// 箭头函数，去掉 function， 加上 =&gt;() =&gt; &#123;&#125; 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; //普通函数 let show1 = function () &#123; console.log(&apos;abc&apos;); &#125; //箭头函数 let show2=()=&gt;&#123; console.log(&apos;efg&apos;); &#125; //调用 show1(); show2(); //普通函数2 let show3 =function (a) &#123; return a*2; &#125; //箭头函数2 let show4 =(a)=&gt; a*2;//因为只有一个return //调用 console.log(show3(10)); console.log(show4(20)); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 5.函数-参数参数扩展/展开 …args 收集剩余的参数,…args只能出现在最后一个参数的位置 展开数组,简写,类似直接把数组的内容写在里面一样默认参数1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; function show(a,b,...args)&#123; console.log(a); console.log(b); console.log(...args); &#125; show(1,2,3,4,5,6); /* 输出: 1 2 3,4,5,6*/ function show2(a, b=9, c=10) &#123; console.log(a, b, c) &#125; show2(11, 22)//11,22,10 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 6.解析赋值定义:允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构.ES6之前:123let a = 1;let b = 2;let c = 3; ES6之后:1let [a, b, c] = [1, 2, 3]; 注意事项: 1.=号左右两边结构必须一致(ag:json=json). 2.右边必须是有意义的东西 3.声明个赋值一定不能分开,必须在一句话中123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; let [a, b, c] = [1, 2, 3] console.log(a, b, c) let &#123;x, y, z&#125; = &#123;x: 1, y: 2, z: 3&#125; console.log(x, y, z) let [json, arr, num, str] = [&#123; a: 1, b: 2 &#125;, [1, 2, 3], 8, &apos;str&apos;] console.log(json, arr, num, str)//&#123;a:1,b:2&#125;,[1,2,3],8,&quot;str&quot; //错误示范 let [a ,b] =[1]; console.log(a,b);//必须一一对应 &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 7.数组map:映射 一个对一个123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; /** * map */ let arr = [11,22,33]; let result1 =arr.map(function(item)&#123; return item*2; &#125;) let result2 = arr.map(item=&gt;item*2); console.log(result1); console.log(result2); let score = [55,66,77,88]; let result3 =score.map(item=&gt;item&gt;=60? &apos;及格&apos;:&apos;不及格&apos;); console.log(result3); // [&quot;不及格&quot;, &quot;及格&quot;, &quot;及格&quot;, &quot;及格&quot;] &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; reudce: 汇总 一堆出来一个(计算总数,平均数….) filter 过滤器 保留为true forEach 迭代循环 8.set和map8.字符串9.面向对象&lt;基础&gt;10.面向对象&lt;实例&gt;11.json12.Promise13.gennerator-认识生成器函数14.generator-yield是啥15.generator-实例]]></content>
      <categories>
        <category>2019-1</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
